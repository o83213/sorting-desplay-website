{"version":3,"sources":["components/Visualizer.js","Algorithms/createRandomArray.js","features/array.js","Algorithms/mergeSort.js","Algorithms/swapFunction.js","Algorithms/quickSort.js","Algorithms/heapSort.js","Algorithms/bubbleSort.js","features/sortingBox.js","Algorithms/changeBarHeight.js","Algorithms/recoverArray.js","features/animation.js","components/ToolBar.js","App.js","index.js"],"names":["Visualizer","array","useSelector","state","value","id","map","index","className","style","height","backgroundColor","randomIntFromInterval","min","max","Math","trunc","random","createRandomArray","arraySize","newArray","i","push","arraySlice","createSlice","name","initialState","reducers","resetArray","action","payload","actions","mergeSort","data","animation","result","splitAndMerge","helperData","startIndex","endIndex","middleIndex","replaceData","j","k","replaceAnimation","length","mergeTwoList","slice","switchData","idx1","idx2","temp","partition","start","end","pivot","isFinal","console","log","doQuickSort","anchor","quickSort","heapSort","input","lastParentIndex","log2","lastParent","childIndexLeft","childIndexRight","heapify","takeAway","bubbleSort","isSwitch","finish","initialStateValue","sortedResult","sortedAnimation","method","sortingBoxSlice","sorting","changeMethod","resetBox","arrayBars","document","getElementsByClassName","closeBtn","getElementsByTagName","closeInput","changeBarHeight","inputAnimation","timeDelay","timer","element","pointerEvents","chosenMark","setTimeout","shift","chosenColor","color","recoverIndex","finishIndex","getElementById","innerText","recoverArray","initialArray","animationSlice","speed","changeSpeed","playAnimation","setInitialArray","ToolBar","dispatch","useDispatch","useState","size","setSize","setSpeed","isRunning","setisRunning","sortedData","sortingBox","sortingBtn","methodBtn","resetBtnColor","background","useEffect","onClick","display","htmlFor","type","defaultValue","onChange","event","Number","target","App","store","configureStore","reducer","arrayReducer","animationReducer","sortingBoxReducer","ReactDOM","render"],"mappings":"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","file":"static/js/main.62988569.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './Visualizer.css';\r\nfunction Visualizer() {\r\n  const array = useSelector(state => {\r\n    return state.array.value;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"bodyContainer\">\r\n        {array.map((value, index) => {\r\n          return (\r\n            <div\r\n              className=\"bar\"\r\n              key={index}\r\n              style={{\r\n                height: `${value}px`,\r\n                backgroundColor: 'blue',\r\n              }}\r\n            ></div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div>\r\n        <h3 id=\"timer\">Not counting yet!</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Visualizer;\r\n\r\n// {array.map((value, index) => {\r\n// return (\r\n//     <div className=\"bar\" id={index} style={{ width: `${value}px` }}></div>\r\n// )\r\n// })}\r\n","function randomIntFromInterval(min, max) {\r\n  return Math.trunc(Math.random() * (max - min + 1) + min);\r\n}\r\nfunction createRandomArray(arraySize = 4) {\r\n  const newArray = [];\r\n  for (let i = 0; i < arraySize; i++) {\r\n    newArray.push(randomIntFromInterval(5, 500));\r\n  }\r\n  return newArray;\r\n}\r\n\r\nexport default createRandomArray;\r\n","/*\r\nThis is the place to create the reducer\r\nBy using @reduxjs/toolkit, you can create a reducer easily!\r\nHere we create a slice that accepts an initial state,\r\nan object full of reducer functions,\r\nand a \"slice name\",\r\nand automatically generates action creators\r\nand action types that correspond to the reducers \r\nand state\r\n*/\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport createRandomArray from '../Algorithms/createRandomArray';\r\nconst initialStateValue = [];\r\nexport const arraySlice = createSlice({\r\n  name: 'array',\r\n  initialState: {\r\n    value: initialStateValue,\r\n  },\r\n  reducers: {\r\n    resetArray: (state, action) => {\r\n      state.value = createRandomArray(action.payload);\r\n    },\r\n  },\r\n});\r\nexport const { resetArray } = arraySlice.actions;\r\nexport default arraySlice.reducer;\r\n","function mergeSort(data) {\r\n  const animation = [];\r\n  function mergeTwoList(\r\n    replaceData,\r\n    helperData,\r\n    startIndex,\r\n    middleIndex,\r\n    endIndex,\r\n    animation\r\n  ) {\r\n    //When merge, replace data is not important, its just a container to record replace index and value, you can even copy the replacedata in the function, but may cause some space wasted problem!\r\n    let i = startIndex;\r\n    let j = middleIndex + 1;\r\n    // k is the replace array index\r\n    let k = startIndex;\r\n    let isFinal =\r\n      endIndex - startIndex === helperData.length - 1 ? true : false;\r\n    // mark left and right\r\n    let replaceAnimation = ['replace', isFinal, startIndex, endIndex];\r\n    animation.push(['region', startIndex, middleIndex, endIndex]);\r\n    while (i <= middleIndex && j <= endIndex) {\r\n      animation.push(['compare', i, j]);\r\n      if (helperData[i] < helperData[j]) {\r\n        animation.push(['chosen', '', i]);\r\n        replaceAnimation.push(helperData[i]);\r\n        replaceData[k++] = helperData[i++];\r\n      } else {\r\n        animation.push(['chosen', '', j]);\r\n        replaceAnimation.push(helperData[j]);\r\n        // animation.push([k, helperData[j]])\r\n        replaceData[k++] = helperData[j++];\r\n      }\r\n    }\r\n    while (i <= middleIndex) {\r\n      animation.push(['chosen', '', i]);\r\n      replaceAnimation.push(helperData[i]);\r\n      replaceData[k++] = helperData[i++];\r\n    }\r\n    while (j <= endIndex) {\r\n      animation.push(['chosen', '', j]);\r\n      replaceAnimation.push(helperData[j]);\r\n      replaceData[k++] = helperData[j++];\r\n    }\r\n    animation.push(replaceAnimation);\r\n    return replaceData;\r\n  }\r\n  function splitAndMerge(data, helperData, startIndex, endIndex, animation) {\r\n    // the helperdata is used to help compare which value is bigger in the array(which is a copy of original data), and data is to store the switch result.\r\n    const middleIndex = Math.trunc((startIndex + endIndex) / 2);\r\n    if (startIndex >= endIndex) {\r\n      return;\r\n    } else {\r\n      splitAndMerge(helperData, data, startIndex, middleIndex, animation);\r\n      splitAndMerge(helperData, data, middleIndex + 1, endIndex, animation);\r\n      return mergeTwoList(\r\n        data,\r\n        helperData,\r\n        startIndex,\r\n        middleIndex,\r\n        endIndex,\r\n        animation\r\n      );\r\n    }\r\n  }\r\n  const result = splitAndMerge(\r\n    data,\r\n    data.slice(),\r\n    0,\r\n    data.length - 1,\r\n    animation\r\n  );\r\n  return [result, animation];\r\n}\r\nexport default mergeSort;\r\n","function switchData(array, idx1, idx2) {\r\n  const temp = array[idx1]\r\n  array[idx1] = array[idx2]\r\n  array[idx2] = temp\r\n}\r\n\r\nexport { switchData }\r\n","import { switchData } from './swapFunction';\r\n\r\nfunction partition(data, start, end, animation) {\r\n  let pivot = start;\r\n  let isFinal = false;\r\n  console.log(`start is ${start}, end is ${end}`);\r\n  animation.push(['chosen', 'anchor', pivot]);\r\n  while (end > start) {\r\n    // find start index\r\n    // first input [pivot, start] animation, because they will compare first!\r\n    // animation.push(['chosen', 'start', start]);\r\n    while (end > start && data[start] <= data[pivot]) {\r\n      // animation.push([pivot, start]);\r\n      if (start !== pivot) {\r\n        animation.push(['recoverColor', start]);\r\n      }\r\n      start++;\r\n      animation.push(['compare', start, end]);\r\n    }\r\n    while (data[end] > data[pivot]) {\r\n      animation.push(['recoverColor', end]);\r\n      end--;\r\n      animation.push(['compare', start, end]);\r\n    }\r\n\r\n    if (end > start) {\r\n      switchData(data, start, end);\r\n      animation.push(['switch', isFinal, start, end, data[start], data[end]]);\r\n    } else if (pivot !== end) {\r\n      switchData(data, pivot, end);\r\n      isFinal = true;\r\n      animation.push(['recoverColor', start, end]);\r\n      animation.push(['switch', isFinal, pivot, end, data[pivot], data[end]]);\r\n    }\r\n  }\r\n  if (end === pivot) {\r\n    animation.push(['recoverColor', start, end]);\r\n    animation.push(['finish', end]);\r\n  }\r\n  return end;\r\n}\r\n\r\nfunction doQuickSort(data, start = 0, end = data.length - 1, animation) {\r\n  if (start < end) {\r\n    const anchor = partition(data, start, end, animation);\r\n    doQuickSort(data, start, anchor - 1, animation);\r\n    doQuickSort(data, anchor + 1, end, animation);\r\n  } else if (start === end) {\r\n    animation.push(['finish', start]);\r\n  }\r\n}\r\n\r\nfunction quickSort(data) {\r\n  let result = data;\r\n  const animation = [];\r\n  doQuickSort(result, 0, result.length - 1, animation);\r\n  return [result, animation];\r\n}\r\n\r\nexport default quickSort;\r\n","import { switchData } from './swapFunction';\r\nlet isFinal = false;\r\nfunction heapify(data, lastParent, animation) {\r\n  for (let i = lastParent; i >= 0; i--) {\r\n    let childIndexLeft = i * 2 + 1;\r\n    let childIndexRight = i * 2 + 2;\r\n    let anchor = i;\r\n    while (childIndexLeft < data.length) {\r\n      // while there is a left child exist, need to doing comparing, so\r\n      // here is to create comparing animation\r\n      if (childIndexRight < data.length) {\r\n        animation.push(['compare', childIndexLeft, childIndexRight]);\r\n        animation.push(['recoverColor', childIndexLeft, childIndexRight]);\r\n        data[childIndexLeft] < data[childIndexRight]\r\n          ? animation.push(['compare', anchor, childIndexRight])\r\n          : animation.push(['compare', anchor, childIndexLeft]);\r\n      } else {\r\n        animation.push(['compare', anchor, childIndexLeft]);\r\n      }\r\n\r\n      // here is to do switch check\r\n      if (\r\n        childIndexRight < data.length &&\r\n        data[anchor] < data[childIndexRight] &&\r\n        data[childIndexLeft] < data[childIndexRight]\r\n      ) {\r\n        console.log(`childIndexRight is : ${childIndexRight}`);\r\n        console.log(`childIndexRight value is : ${data[childIndexRight]}`);\r\n        console.log(`switch with childRight`);\r\n        switchData(data, anchor, childIndexRight);\r\n        // record animation\r\n        animation.push([\r\n          'switch',\r\n          isFinal,\r\n          anchor,\r\n          childIndexRight,\r\n          data[anchor],\r\n          data[childIndexRight],\r\n        ]);\r\n        anchor = childIndexRight;\r\n      } else if (data[anchor] < data[childIndexLeft]) {\r\n        console.log(`switch with childleft`);\r\n        switchData(data, anchor, childIndexLeft);\r\n        animation.push([\r\n          'switch',\r\n          isFinal,\r\n          anchor,\r\n          childIndexLeft,\r\n          data[anchor],\r\n          data[childIndexLeft],\r\n        ]);\r\n        anchor = childIndexLeft;\r\n      } else {\r\n        childIndexRight < data.length - i &&\r\n        data[childIndexLeft] < data[childIndexRight]\r\n          ? animation.push(['recoverColor', anchor, childIndexRight])\r\n          : animation.push(['recoverColor', anchor, childIndexLeft]);\r\n        break;\r\n      }\r\n\r\n      childIndexLeft = anchor * 2 + 1;\r\n      childIndexRight = anchor * 2 + 2;\r\n    }\r\n    console.log(`In heapify, data is : ${data}`);\r\n  }\r\n}\r\n\r\nfunction takeAway(data, animation) {\r\n  for (let i = 1; i < data.length; i++) {\r\n    // take away yop element and put it at the end\r\n    let anchor = 0;\r\n    switchData(data, 0, data.length - i);\r\n    isFinal = true;\r\n    animation.push([\r\n      'switch',\r\n      isFinal,\r\n      0,\r\n      data.length - i,\r\n      data[0],\r\n      data[data.length - i],\r\n    ]);\r\n    isFinal = false;\r\n    // rebuild the heap\r\n    let childIndexLeft = anchor * 2 + 1;\r\n    let childIndexRight = anchor * 2 + 2;\r\n    while (childIndexLeft < data.length - i) {\r\n      // while there is a left child exist, need to doing comparing, so\r\n      // here is to create comparing animation\r\n      if (childIndexRight < data.length - i) {\r\n        animation.push(['compare', childIndexLeft, childIndexRight]);\r\n        animation.push(['recoverColor', childIndexLeft, childIndexRight]);\r\n        data[childIndexLeft] < data[childIndexRight]\r\n          ? animation.push(['compare', anchor, childIndexRight])\r\n          : animation.push(['compare', anchor, childIndexLeft]);\r\n      } else {\r\n        animation.push(['compare', anchor, childIndexLeft]);\r\n      }\r\n      if (\r\n        childIndexRight < data.length - i &&\r\n        data[anchor] < data[childIndexRight] &&\r\n        data[childIndexLeft] < data[childIndexRight]\r\n      ) {\r\n        switchData(data, anchor, childIndexRight);\r\n        animation.push([\r\n          'switch',\r\n          isFinal,\r\n          anchor,\r\n          childIndexRight,\r\n          data[anchor],\r\n          data[childIndexRight],\r\n        ]);\r\n        anchor = childIndexRight;\r\n      } else if (data[anchor] < data[childIndexLeft]) {\r\n        switchData(data, anchor, childIndexLeft);\r\n        animation.push([\r\n          'switch',\r\n          isFinal,\r\n          anchor,\r\n          childIndexLeft,\r\n          data[anchor],\r\n          data[childIndexLeft],\r\n        ]);\r\n        anchor = childIndexLeft;\r\n      } else {\r\n        childIndexRight < data.length - i &&\r\n        data[childIndexLeft] < data[childIndexRight]\r\n          ? animation.push(['recoverColor', anchor, childIndexRight])\r\n          : animation.push(['recoverColor', anchor, childIndexLeft]);\r\n        break;\r\n      }\r\n      childIndexLeft = anchor * 2 + 1;\r\n      childIndexRight = anchor * 2 + 2;\r\n      console.log(`In takeaway, data is : ${data}`);\r\n    }\r\n  }\r\n  animation.push(['finish', 0]);\r\n}\r\n\r\nfunction heapSort(input) {\r\n  let data = input;\r\n  const animation = [];\r\n  const length = data.length;\r\n  const lastParentIndex = 2 ** Math.trunc(Math.log2(length)) - 2;\r\n  console.log(`lastParentIndex is ${lastParentIndex}`);\r\n  heapify(data, lastParentIndex, animation);\r\n  console.log(`After heapify, data is ${data}`);\r\n  takeAway(data, animation);\r\n  console.log(`After takeaway, data is ${data}`);\r\n  return [data, animation];\r\n}\r\n\r\nexport default heapSort;\r\n","import { switchData } from './swapFunction';\r\n\r\nfunction bubbleSort(data) {\r\n  const animation = [];\r\n  let result = data;\r\n  let isSwitch = false;\r\n  let isFinal = false;\r\n  for (let i = 0; i < result.length - 1; i++) {\r\n    isSwitch = false;\r\n    isFinal = false;\r\n    for (let j = 0; j < result.length - i - 1; j++) {\r\n      animation.push(['compare', j, j + 1]);\r\n      isFinal = j === result.length - i - 2 ? true : false;\r\n      if (result[j] > result[j + 1]) {\r\n        switchData(result, j, j + 1);\r\n        animation.push(['switch', isFinal, j, j + 1, result[j], result[j + 1]]);\r\n        isSwitch = true;\r\n      } else {\r\n        animation.push(['recoverColor', j, j + 1]);\r\n        if (isSwitch && isFinal)\r\n          animation.push(['finish', result.length - 1 - i]);\r\n      }\r\n    }\r\n    if (!isSwitch) {\r\n      console.log(isSwitch);\r\n      const finish = ['finish'];\r\n      for (let k = 0; k < result.length - i; k++) {\r\n        finish.push(k);\r\n      }\r\n      animation.push(finish);\r\n      break;\r\n    } else if (isSwitch && i === result.length - 2) {\r\n      animation.push(['finish', 0]);\r\n    }\r\n  }\r\n  return [result, animation];\r\n}\r\n\r\nexport default bubbleSort;\r\n","/*\r\nThis is the place to create the reducer\r\nBy using @reduxjs/toolkit, you can create a reducer easily!\r\nHere we create a slice that accepts an initial state,\r\nan object full of reducer functions,\r\nand a \"slice name\",\r\nand automatically generates action creators\r\nand action types that correspond to the reducers \r\nand state\r\n*/\r\n\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport mergeSort from '../Algorithms/mergeSort'\r\nimport quickSort from '../Algorithms/quickSort'\r\nimport heapSort from '../Algorithms/heapSort'\r\nimport bubbleSort from '../Algorithms/bubbleSort'\r\n\r\nconst initialStateValue = { sortedResult: [], sortedAnimation: [], method: '' }\r\nexport const sortingBoxSlice = createSlice({\r\n  name: 'sortingBox',\r\n  initialState: {\r\n    value: initialStateValue,\r\n  },\r\n  reducers: {\r\n    sorting: (state, action) => {\r\n      const data = action.payload.slice()\r\n      let [result, animation] = [[], []]\r\n      switch (state.value.method) {\r\n        case 'merge':\r\n          console.log(`Now going to use ${state.value.method} sort!`)\r\n          ;[result, animation] = mergeSort(data)\r\n          console.log(result)\r\n          console.log(animation)\r\n          break\r\n        case 'quick':\r\n          console.log(`Now going to use ${state.value.method} sort!`)\r\n          ;[result, animation] = quickSort(data)\r\n          console.log(result)\r\n          console.log(animation)\r\n          break\r\n        case 'bubble':\r\n          console.log(`Now going to use ${state.value.method} sort!`)\r\n          ;[result, animation] = bubbleSort(data)\r\n          console.log(result)\r\n          console.log(animation)\r\n          break\r\n        case 'heap':\r\n          console.log(`Now going to use ${state.value.method} sort!`)\r\n          ;[result, animation] = heapSort(data)\r\n          console.log(result)\r\n          console.log(animation)\r\n          break\r\n        default:\r\n          console.log('No method now!')\r\n      }\r\n      state.value = {\r\n        sortedResult: result,\r\n        sortedAnimation: animation,\r\n        method: state.value.method,\r\n      }\r\n    },\r\n    changeMethod: (state, action) => {\r\n      state.value.method = action.payload\r\n    },\r\n    resetBox: (state) => {\r\n      console.log('Reset box!')\r\n      state.value = initialStateValue\r\n    },\r\n  },\r\n})\r\nexport default sortingBoxSlice.reducer\r\nexport const { sorting, changeMethod, resetBox } = sortingBoxSlice.actions\r\n","const arrayBars = document.getElementsByClassName('bar');\r\nconst closeBtn = document.getElementsByTagName('button');\r\nconst closeInput = document.getElementsByTagName('input');\r\n// const timeStep = 1000\r\n// function changeBarHeight(animation, timeDelay = 100) {\r\nfunction changeBarHeight(inputAnimation, timeDelay = 100) {\r\n  let timer = 0;\r\n  const animation = [...inputAnimation, ['animationEnd']];\r\n  // const startingTime = new Date().getTime();\r\n  for (const element of closeBtn) {\r\n    element.style.pointerEvents = 'none';\r\n  }\r\n  for (const element of closeInput) {\r\n    element.style.pointerEvents = 'none';\r\n  }\r\n  for (let i = 0; i < animation.length; i++) {\r\n    let [action, ...data] = animation[i];\r\n    let isFinal = false;\r\n    let chosenMark = '';\r\n    switch (action) {\r\n      case 'region':\r\n        //paint left region yellow\r\n        setTimeout(() => {\r\n          for (let i = data[0]; i <= data[1]; i++) {\r\n            arrayBars[i].style.backgroundColor = 'yellow';\r\n          }\r\n        }, timer);\r\n        //paint right region orange\r\n        setTimeout(() => {\r\n          for (let i = data[1] + 1; i <= data[2]; i++) {\r\n            arrayBars[i].style.backgroundColor = 'orange';\r\n          }\r\n        }, timer + timeDelay);\r\n        timer += 2 * timeDelay;\r\n        break;\r\n      case 'compare':\r\n        setTimeout(() => {\r\n          arrayBars[data[0]].style.backgroundColor = 'red';\r\n          arrayBars[data[1]].style.backgroundColor = 'red';\r\n        }, timer);\r\n        timer += timeDelay;\r\n        break;\r\n\r\n      case 'chosen':\r\n        // Totally 2 step\r\n        //identify mark\r\n        chosenMark = data.shift();\r\n        let chosenColor = 'green';\r\n        // step 1, change color for comparing bar\r\n        setTimeout(() => {\r\n          switch (chosenMark) {\r\n            case 'anchor':\r\n              chosenColor = 'Yellow';\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          arrayBars[data].style.backgroundColor = chosenColor;\r\n        }, timer);\r\n        timer += timeDelay;\r\n        break;\r\n      case 'replace':\r\n        isFinal = data.shift();\r\n        // start index is data[0] end index is data[1]\r\n        let index = data[0];\r\n        for (let j = 2; j < data.length; j++) {\r\n          // change height\r\n          setTimeout(() => {\r\n            arrayBars[index].style.height = `${data[j]}px`;\r\n          }, timer);\r\n          // finished change\r\n          let color = isFinal ? '#00BBFF' : 'blue';\r\n          setTimeout(() => {\r\n            arrayBars[index].style.backgroundColor = color;\r\n            index++;\r\n          }, timer + timeDelay);\r\n\r\n          timer += 2 * timeDelay;\r\n        }\r\n        break;\r\n      case 'switch':\r\n        isFinal = data.shift();\r\n        let color = isFinal ? '#00BBFF' : 'blue';\r\n        setTimeout(() => {\r\n          arrayBars[data[0]].style.backgroundColor = 'green';\r\n          arrayBars[data[1]].style.backgroundColor = 'green';\r\n        }, timer);\r\n        setTimeout(() => {\r\n          arrayBars[data[0]].style.height = `${data[2]}px`;\r\n          arrayBars[data[1]].style.height = `${data[3]}px`;\r\n        }, timer + timeDelay);\r\n        setTimeout(() => {\r\n          arrayBars[data[0]].style.backgroundColor = 'blue';\r\n          arrayBars[data[1]].style.backgroundColor = color;\r\n        }, timer + 2 * timeDelay);\r\n        timer += 3 * timeDelay;\r\n        break;\r\n      case 'recoverColor':\r\n        let recoverIndex = data.length <= 1 ? [data] : [...data];\r\n        setTimeout(() => {\r\n          for (let i = 0; i < recoverIndex.length; i++) {\r\n            arrayBars[recoverIndex[i]].style.backgroundColor = 'blue';\r\n          }\r\n        }, timer);\r\n        timer += timeDelay;\r\n        break;\r\n      case 'finish':\r\n        let finishIndex = data.length <= 1 ? [data] : [...data];\r\n        setTimeout(() => {\r\n          for (let i = 0; i < finishIndex.length; i++) {\r\n            arrayBars[finishIndex[i]].style.backgroundColor = '#00BBFF';\r\n          }\r\n        }, timer);\r\n        timer += timeDelay;\r\n        break;\r\n      case 'animationEnd':\r\n        setTimeout(() => {\r\n          console.log('Finished playing animation!');\r\n          document.getElementById('timer').innerText = `Spend time: ${\r\n            timer / 1000\r\n          } sec`;\r\n          for (const element of closeBtn) {\r\n            element.style.pointerEvents = 'auto';\r\n          }\r\n          for (const element of closeInput) {\r\n            element.style.pointerEvents = 'auto';\r\n          }\r\n        }, timer);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}\r\nexport default changeBarHeight;\r\n","const arrayBars = document.getElementsByClassName('bar');\r\nfunction recoverArray(initialArray) {\r\n  console.log('Array recover!');\r\n  for (let i = 0; i < initialArray.length; i++) {\r\n    arrayBars[i].style.height = `${initialArray[i]}px`;\r\n    arrayBars[i].style.backgroundColor = 'blue';\r\n  }\r\n}\r\nexport default recoverArray;\r\n","/*\r\nThis is the place to create the reducer\r\nBy using @reduxjs/toolkit, you can create a reducer easily!\r\nHere we create a slice that accepts an initial state,\r\nan object full of reducer functions,\r\nand a \"slice name\",\r\nand automatically generates action creators\r\nand action types that correspond to the reducers \r\nand state\r\n*/\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport changeBarHeight from '../Algorithms/changeBarHeight';\r\nimport recoverArray from '../Algorithms/recoverArray';\r\nconst initialStateValue = { speed: 10 };\r\nexport const animationSlice = createSlice({\r\n  name: 'animation',\r\n  initialState: {\r\n    value: initialStateValue,\r\n  },\r\n  reducers: {\r\n    changeSpeed: (state, action) => {\r\n      state.value.speed = action.payload;\r\n    },\r\n    playAnimation: (state, action) => {\r\n      changeBarHeight(action.payload, state.value.speed);\r\n    },\r\n    setInitialArray: (state, action) => {\r\n      recoverArray(action.payload);\r\n    },\r\n  },\r\n});\r\nexport const { changeSpeed } = animationSlice.actions;\r\nexport const { playAnimation } = animationSlice.actions;\r\nexport const { setInitialArray } = animationSlice.actions;\r\nexport default animationSlice.reducer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { resetArray } from '../features/array';\r\nimport { sorting, changeMethod, resetBox } from '../features/sortingBox';\r\nimport {\r\n  changeSpeed,\r\n  playAnimation,\r\n  setInitialArray,\r\n} from '../features/animation';\r\nimport './ToolBar.css';\r\nfunction ToolBar() {\r\n  const dispatch = useDispatch();\r\n  const [minsize, minspeed] = [4, 10];\r\n  const [size, setSize] = useState(() => minsize);\r\n  const [speed, setSpeed] = useState(() => minspeed);\r\n  const [isRunning, setisRunning] = useState(() => false);\r\n  /*\r\n  timer testing!\r\n  */\r\n  //\r\n  const sortedData = useSelector(state => {\r\n    return state.sortingBox.value;\r\n  });\r\n  const array = useSelector(state => {\r\n    return state.array.value;\r\n  });\r\n  const sortingBtn = document.getElementById('sortBtn');\r\n  const methodBtn = document.getElementsByClassName('methodBtn');\r\n  const resetBtnColor = () => {\r\n    for (const btn of methodBtn) {\r\n      btn.style.background = 'none';\r\n    }\r\n  };\r\n  /* \r\n  To deal with useState delay problem, we need to use useEffect function out of the render\r\n  and here is to reset array when draging size bar!\r\n  */\r\n  useEffect(() => {\r\n    // console.log(`size is ${size}`)\r\n    dispatch(resetArray(size));\r\n    dispatch(setInitialArray(array));\r\n  }, [size]);\r\n  useEffect(() => {\r\n    // console.log(`speed is ${speed}`)\r\n    dispatch(changeSpeed(speed));\r\n  }, [speed]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning === true) {\r\n      dispatch(setInitialArray(array));\r\n      dispatch(playAnimation(sortedData.sortedAnimation));\r\n      setisRunning(false);\r\n    }\r\n  }, [isRunning]);\r\n\r\n  return (\r\n    <div className=\"toolbar\">\r\n      <div className=\"container\">\r\n        <div className=\"box reset\">\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => {\r\n              dispatch(setInitialArray(array));\r\n              dispatch(resetArray(size));\r\n              resetBtnColor();\r\n              dispatch(resetBox());\r\n              sortingBtn.style.display = 'none';\r\n              // testing timer!\r\n              //\r\n            }}\r\n          >\r\n            Reset Array!\r\n          </button>\r\n        </div>\r\n        <div className=\"box adjust\">\r\n          <div className=\"adjust-label\">\r\n            <label htmlFor=\"size\">Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              className=\"size-input\"\r\n              defaultValue=\"0\"\r\n              onChange={event => {\r\n                setSize(Number(event.target.value) + 4);\r\n              }}\r\n            ></input>\r\n            <label htmlFor=\"size\" id=\"sizeValue\">\r\n              {size} bars\r\n            </label>\r\n          </div>\r\n          <div className=\"adjust-label\">\r\n            <label htmlFor=\"speed\">Speed:</label>\r\n            <input\r\n              type=\"range\"\r\n              className=\"speed-input\"\r\n              defaultValue=\"0\"\r\n              onChange={event => {\r\n                setSpeed(Number(event.target.value) * 10 + 10);\r\n              }}\r\n            ></input>\r\n            <label htmlFor=\"speed\" id=\"speedValue\">\r\n              {speed} ms\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className=\"box method\">\r\n          <button\r\n            className=\"btn methodBtn\"\r\n            onClick={event => {\r\n              console.log('Merge sort!');\r\n              dispatch(changeMethod('merge'));\r\n              sortingBtn.style.display = 'block';\r\n              resetBtnColor();\r\n              event.target.style.background = 'yellow';\r\n            }}\r\n          >\r\n            Merge Sort\r\n          </button>\r\n          <button\r\n            className=\"btn methodBtn\"\r\n            onClick={event => {\r\n              console.log('Quick sort!');\r\n              dispatch(changeMethod('quick'));\r\n              sortingBtn.style.display = 'block';\r\n              resetBtnColor();\r\n              event.target.style.background = 'yellow';\r\n            }}\r\n          >\r\n            Quick Sort\r\n          </button>\r\n          <button\r\n            className=\"btn methodBtn\"\r\n            onClick={event => {\r\n              console.log('Heap sort!');\r\n              dispatch(changeMethod('heap'));\r\n              sortingBtn.style.display = 'block';\r\n              resetBtnColor();\r\n              event.target.style.background = 'yellow';\r\n            }}\r\n          >\r\n            Heap Sort\r\n          </button>\r\n          <button\r\n            className=\"btn methodBtn\"\r\n            onClick={event => {\r\n              console.log('Bubble sort!');\r\n              dispatch(changeMethod('bubble'));\r\n              sortingBtn.style.display = 'block';\r\n              resetBtnColor();\r\n              event.target.style.background = 'yellow';\r\n            }}\r\n          >\r\n            Bubble Sort\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"box sort\">\r\n          <button\r\n            className=\"btn\"\r\n            id=\"sortBtn\"\r\n            onClick={() => {\r\n              dispatch(sorting(array));\r\n              setisRunning(true);\r\n            }}\r\n          >\r\n            Sort!\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToolBar;\r\n","import Visualizer from './components/Visualizer';\nimport ToolBar from './components/ToolBar';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToolBar />\n      <Visualizer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport arrayReducer from './features/array';\nimport animationReducer from './features/animation';\nimport sortingBoxReducer from './features/sortingBox';\n//\nconst store = configureStore({\n  reducer: {\n    array: arrayReducer,\n    animation: animationReducer,\n    sortingBox: sortingBoxReducer,\n  },\n});\n//\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
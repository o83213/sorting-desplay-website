{"version":3,"sources":["components/toolbar/MethodButton.module.css","components/toolbar/InputBar.module.css","components/toolbar/SortingButton.module.css","components/visualizer/Visualizer.js","algorithms/createRandomArray.js","store/array-slice.js","store/sortingBox-slice.js","store/animation-slice.js","algorithms/mergeSort.js","algorithms/swapFunction.js","algorithms/quickSort.js","algorithms/heapSort.js","algorithms/bubbleSort.js","algorithms/sortByMethod.js","store/sortingBox-action.js","components/toolbar/MethodButton.js","components/toolbar/InputBar.js","components/toolbar/SortingButton.js","components/toolbar/ToolBar.js","store/animation-action.js","App.js","store/index.js","index.js","components/toolbar/ToolBar.module.css"],"names":["module","exports","Visualizer","useState","array","setArray","timmer","setTimmer","arrayData","useSelector","state","value","isRunning","animation","useEffect","countingTime","startingTime","Date","setInterval","now","clearInterval","id","map","data","index","className","style","height","backgroundColor","color","toFixed","randomIntFromInterval","min","max","Math","trunc","random","createRandomArray","arraySize","newArray","i","push","arraySlice","createSlice","name","initialState","reducers","resetArray","action","payload","forEach","el","changeArrayByIndex","length","arrayAction","actions","sortingBoxSlice","sortedResult","sortedAnimation","method","changeMethod","storeSortingResult","sortingBoxAction","animationSlice","animationData","speed","changeSpeed","storeAnimation","changingRunningState","animationAction","mergeSort","result","splitAndMerge","helperData","startIndex","endIndex","middleIndex","replaceData","j","k","replaceAnimation","mergeTwoList","slice","switchData","idx1","idx2","temp","partition","start","end","pivot","isFinal","doQuickSort","anchor","quickSort","heapSort","input","lastParent","childIndexLeft","childIndexRight","heapify","log2","takeAway","bubbleSort","isSwitch","finish","sortByMethod","obj","sortingArray","dispatch","translatedAnimation","inputAnimation","item","tag","chosenColor","shift","recoverIndex","finishIndex","translateAnimation","MethodButton","props","classes","btn","disable","disabled","onClick","buttonFnc","InputBar","setValue","adjust","htmlFor","type","defaultValue","step","ref","setRef","onChange","event","Number","target","InputFnc","changeStep","initialValue","unit","SortingButton","message","ToolBar","size","setSize","setSpeed","sortedData","setSortedData","setisRunning","isReadyToSort","setIsReadyToSort","sizeRef","useRef","speedRef","useDispatch","sortingBox","isAnimationRunning","changeSortingMethodHandler","newMethod","realSize","current","realSpeed","setTimeout","displayAnimation","App","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8ddd34e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"MethodButton_btn__pLRI9\",\"disable\":\"MethodButton_disable__1YF9e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"adjust\":\"InputBar_adjust__3a4eU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SortingButton_btn__3ob9G\"};","import { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './Visualizer.css';\r\nfunction Visualizer() {\r\n  const [array, setArray] = useState([]);\r\n  const [timmer, setTimmer] = useState(0);\r\n  const arrayData = useSelector(state => state.array.value);\r\n  const isRunning = useSelector(state => state.animation.isRunning);\r\n  useEffect(() => {\r\n    setArray(arrayData);\r\n  }, [arrayData]);\r\n  useEffect(() => {\r\n    const startingTime = new Date();\r\n    let countingTime;\r\n    if (isRunning) {\r\n      countingTime = setInterval(() => {\r\n        const now = new Date();\r\n        setTimmer(now - startingTime);\r\n      }, 100);\r\n    }\r\n    return () => {\r\n      clearInterval(countingTime);\r\n    };\r\n  }, [isRunning]);\r\n  return (\r\n    <div>\r\n      <div id=\"bodyContainer\">\r\n        {array.map((data, index) => {\r\n          return (\r\n            <div\r\n              className=\"bar\"\r\n              key={index}\r\n              style={{\r\n                height: `${data.height}px`,\r\n                backgroundColor: `${data.color ? data.color : 'blue'}`,\r\n              }}\r\n            ></div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div>\r\n        <h3 id=\"timer\">{(timmer / 1000).toFixed(1)} seconds</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Visualizer;\r\n","function randomIntFromInterval(min, max) {\r\n  return Math.trunc(Math.random() * (max - min + 1) + min);\r\n}\r\nfunction createRandomArray(arraySize = 4) {\r\n  const newArray = [];\r\n  for (let i = 0; i < arraySize; i++) {\r\n    newArray.push(randomIntFromInterval(5, 500));\r\n  }\r\n  return newArray;\r\n}\r\n\r\nexport default createRandomArray;\r\n","/*\r\nThis is the place to create the reducer\r\nBy using @reduxjs/toolkit, you can create a reducer easily!\r\nHere we create a slice that accepts an initial state,\r\nan object full of reducer functions,\r\nand a \"slice name\",\r\nand automatically generates action creators\r\nand action types that correspond to the reducers \r\nand state\r\n*/\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport createRandomArray from '../algorithms/createRandomArray';\r\nconst initialState = { value: [] };\r\n// const arrayBars = document.getElementsByClassName('bar');\r\n// function recoverArray(initialArray) {\r\n//   for (let i = 0; i < initialArray.length; i++) {\r\n//     arrayBars[i].style.height = `${initialArray[i]}px`;\r\n//     arrayBars[i].style.backgroundColor = 'blue';\r\n//   }\r\n// }\r\n\r\nconst arraySlice = createSlice({\r\n  name: 'array',\r\n  initialState,\r\n  reducers: {\r\n    resetArray: (state, action) => {\r\n      // state.value = createRandomArray(action.payload);\r\n      let data = [];\r\n      createRandomArray(action.payload).forEach(el => {\r\n        data.push({ height: el, color: 'blue' });\r\n      });\r\n\r\n      state.value = data;\r\n    },\r\n    changeArrayByIndex: (state, action) => {\r\n      let newArray = state.value;\r\n      for (let i = 0; i < action.payload.index.length; i++) {\r\n        if (action.payload.value[i].height) {\r\n          newArray[action.payload.index[i]].height =\r\n            action.payload.value[i].height;\r\n        }\r\n        if (action.payload.value[i].color) {\r\n          newArray[action.payload.index[i]].color =\r\n            action.payload.value[i].color;\r\n        }\r\n      }\r\n      state.value = newArray;\r\n    },\r\n  },\r\n});\r\nexport const arrayAction = arraySlice.actions;\r\nexport default arraySlice;\r\n","/*\r\nThis is the place to create the reducer\r\nBy using @reduxjs/toolkit, you can create a reducer easily!\r\nHere we create a slice that accepts an initial state,\r\nan object full of reducer functions,\r\nand a \"slice name\",\r\nand automatically generates action creators\r\nand action types that correspond to the reducers \r\nand state\r\n*/\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = { sortedResult: [], sortedAnimation: [], method: '' };\r\nconst sortingBoxSlice = createSlice({\r\n  name: 'sortingBox',\r\n  initialState,\r\n  reducers: {\r\n    changeMethod: (state, action) => {\r\n      state.method = action.payload;\r\n    },\r\n    storeSortingResult: (state, action) => {\r\n      state.sortedResult = action.payload.sortedResult;\r\n      state.sortedAnimation = action.payload.sortedAnimation;\r\n    },\r\n  },\r\n});\r\nexport default sortingBoxSlice;\r\nexport const sortingBoxAction = sortingBoxSlice.actions;\r\n","/*\r\nThis is the place to create the reducer\r\nBy using @reduxjs/toolkit, you can create a reducer easily!\r\nHere we create a slice that accepts an initial state,\r\nan object full of reducer functions,\r\nand a \"slice name\",\r\nand automatically generates action creators\r\nand action types that correspond to the reducers \r\nand state\r\n*/\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nconst initialState = { animationData: [], speed: 10, isRunning: false };\r\nconst animationSlice = createSlice({\r\n  name: 'animation',\r\n  initialState,\r\n  reducers: {\r\n    changeSpeed: (state, action) => {\r\n      state.speed = action.payload;\r\n    },\r\n    storeAnimation: (state, action) => {\r\n      state.animationData = action.payload;\r\n      // console.log(state.animationData);\r\n    },\r\n    changingRunningState(state, action) {\r\n      state.isRunning = action.payload;\r\n    },\r\n  },\r\n});\r\nexport const animationAction = animationSlice.actions;\r\nexport default animationSlice;\r\n","function mergeSort(data) {\r\n  const animation = [];\r\n  function mergeTwoList(\r\n    replaceData,\r\n    helperData,\r\n    startIndex,\r\n    middleIndex,\r\n    endIndex,\r\n    animation\r\n  ) {\r\n    // console.log(helperData);\r\n    //When merge, replace data is not important, its just a container to record replace index and value, you can even copy the replacedata in the function, but may cause some space wasted problem!\r\n    let i = startIndex;\r\n    let j = middleIndex + 1;\r\n    // k is the replace array index\r\n    let k = startIndex;\r\n    let isFinal =\r\n      endIndex - startIndex === helperData.length - 1 ? true : false;\r\n    // mark left and right\r\n    let replaceAnimation = ['replace', isFinal, startIndex, endIndex];\r\n    animation.push(['region', startIndex, middleIndex, endIndex]);\r\n    while (i <= middleIndex && j <= endIndex) {\r\n      animation.push(['compare', i, j]);\r\n      if (helperData[i] < helperData[j]) {\r\n        animation.push(['chosen', '', i]);\r\n        replaceAnimation.push(helperData[i]);\r\n        replaceData[k++] = helperData[i++];\r\n      } else {\r\n        animation.push(['chosen', '', j]);\r\n        replaceAnimation.push(helperData[j]);\r\n        replaceData[k++] = helperData[j++];\r\n      }\r\n    }\r\n    while (i <= middleIndex) {\r\n      animation.push(['chosen', '', i]);\r\n      replaceAnimation.push(helperData[i]);\r\n      replaceData[k++] = helperData[i++];\r\n    }\r\n    while (j <= endIndex) {\r\n      animation.push(['chosen', '', j]);\r\n      replaceAnimation.push(helperData[j]);\r\n      replaceData[k++] = helperData[j++];\r\n    }\r\n    animation.push(replaceAnimation);\r\n    return replaceData;\r\n  }\r\n  function splitAndMerge(data, helperData, startIndex, endIndex, animation) {\r\n    // the helperdata is used to help compare which value is bigger in the array(which is a copy of original data), and data is to store the switch result.\r\n    // console.log(helperData);\r\n    const middleIndex = Math.trunc((startIndex + endIndex) / 2);\r\n    if (startIndex >= endIndex) {\r\n      return;\r\n    } else {\r\n      splitAndMerge(helperData, data, startIndex, middleIndex, animation);\r\n      splitAndMerge(helperData, data, middleIndex + 1, endIndex, animation);\r\n      return mergeTwoList(\r\n        data,\r\n        helperData,\r\n        startIndex,\r\n        middleIndex,\r\n        endIndex,\r\n        animation\r\n      );\r\n    }\r\n  }\r\n  const result = splitAndMerge(\r\n    data,\r\n    data.slice(),\r\n    0,\r\n    data.length - 1,\r\n    animation\r\n  );\r\n  return [result, animation];\r\n}\r\nexport default mergeSort;\r\n","function switchData(array, idx1, idx2) {\r\n  const temp = array[idx1]\r\n  array[idx1] = array[idx2]\r\n  array[idx2] = temp\r\n}\r\n\r\nexport { switchData }\r\n","import { switchData } from './swapFunction';\r\n\r\nfunction partition(data, start, end, animation) {\r\n  let pivot = start;\r\n  let isFinal = false;\r\n  animation.push(['chosen', 'anchor', pivot]);\r\n  while (end > start) {\r\n    // find start index\r\n    while (end > start && data[start] <= data[pivot]) {\r\n      \r\n      if (start !== pivot) {\r\n        animation.push(['recoverColor', start]);\r\n      }\r\n      start++;\r\n      animation.push(['compare', start, end]);\r\n    }\r\n    while (data[end] > data[pivot]) {\r\n      animation.push(['recoverColor', end]);\r\n      end--;\r\n      animation.push(['compare', start, end]);\r\n    }\r\n\r\n    if (end > start) {\r\n      switchData(data, start, end);\r\n      animation.push(['switch', isFinal, start, end, data[start], data[end]]);\r\n    } else if (pivot !== end) {\r\n      switchData(data, pivot, end);\r\n      isFinal = true;\r\n      animation.push(['recoverColor', start, end]);\r\n      animation.push(['switch', isFinal, pivot, end, data[pivot], data[end]]);\r\n    }\r\n  }\r\n  if (end === pivot) {\r\n    animation.push(['recoverColor', start, end]);\r\n    animation.push(['finish', end]);\r\n  }\r\n  return end;\r\n}\r\n\r\nfunction doQuickSort(data, start = 0, end = data.length - 1, animation) {\r\n  if (start < end) {\r\n    const anchor = partition(data, start, end, animation);\r\n    doQuickSort(data, start, anchor - 1, animation);\r\n    doQuickSort(data, anchor + 1, end, animation);\r\n  } else if (start === end) {\r\n    animation.push(['finish', start]);\r\n  }\r\n}\r\n\r\nfunction quickSort(data) {\r\n  let result = data;\r\n  const animation = [];\r\n  doQuickSort(result, 0, result.length - 1, animation);\r\n  return [result, animation];\r\n}\r\n\r\nexport default quickSort;\r\n","import { switchData } from './swapFunction';\r\nlet isFinal = false;\r\nfunction heapify(data, lastParent, animation) {\r\n  for (let i = lastParent; i >= 0; i--) {\r\n    let childIndexLeft = i * 2 + 1;\r\n    let childIndexRight = i * 2 + 2;\r\n    let anchor = i;\r\n    while (childIndexLeft < data.length) {\r\n      // while there is a left child exist, need to doing comparing, so\r\n      // here is to create comparing animation\r\n      if (childIndexRight < data.length) {\r\n        animation.push(['compare', childIndexLeft, childIndexRight]);\r\n        animation.push(['recoverColor', childIndexLeft, childIndexRight]);\r\n        data[childIndexLeft] < data[childIndexRight]\r\n          ? animation.push(['compare', anchor, childIndexRight])\r\n          : animation.push(['compare', anchor, childIndexLeft]);\r\n      } else {\r\n        animation.push(['compare', anchor, childIndexLeft]);\r\n      }\r\n\r\n      // here is to do switch check\r\n      if (\r\n        childIndexRight < data.length &&\r\n        data[anchor] < data[childIndexRight] &&\r\n        data[childIndexLeft] < data[childIndexRight]\r\n      ) {\r\n        switchData(data, anchor, childIndexRight);\r\n        // record animation\r\n        animation.push([\r\n          'switch',\r\n          isFinal,\r\n          anchor,\r\n          childIndexRight,\r\n          data[anchor],\r\n          data[childIndexRight],\r\n        ]);\r\n        anchor = childIndexRight;\r\n      } else if (data[anchor] < data[childIndexLeft]) {\r\n        switchData(data, anchor, childIndexLeft);\r\n        animation.push([\r\n          'switch',\r\n          isFinal,\r\n          anchor,\r\n          childIndexLeft,\r\n          data[anchor],\r\n          data[childIndexLeft],\r\n        ]);\r\n        anchor = childIndexLeft;\r\n      } else {\r\n        childIndexRight < data.length - i &&\r\n        data[childIndexLeft] < data[childIndexRight]\r\n          ? animation.push(['recoverColor', anchor, childIndexRight])\r\n          : animation.push(['recoverColor', anchor, childIndexLeft]);\r\n        break;\r\n      }\r\n\r\n      childIndexLeft = anchor * 2 + 1;\r\n      childIndexRight = anchor * 2 + 2;\r\n    }\r\n  }\r\n}\r\n\r\nfunction takeAway(data, animation) {\r\n  for (let i = 1; i < data.length; i++) {\r\n    // take away yop element and put it at the end\r\n    let anchor = 0;\r\n    switchData(data, 0, data.length - i);\r\n    isFinal = true;\r\n    animation.push([\r\n      'switch',\r\n      isFinal,\r\n      0,\r\n      data.length - i,\r\n      data[0],\r\n      data[data.length - i],\r\n    ]);\r\n    isFinal = false;\r\n    // rebuild the heap\r\n    let childIndexLeft = anchor * 2 + 1;\r\n    let childIndexRight = anchor * 2 + 2;\r\n    while (childIndexLeft < data.length - i) {\r\n      // while there is a left child exist, need to doing comparing, so\r\n      // here is to create comparing animation\r\n      if (childIndexRight < data.length - i) {\r\n        animation.push(['compare', childIndexLeft, childIndexRight]);\r\n        animation.push(['recoverColor', childIndexLeft, childIndexRight]);\r\n        data[childIndexLeft] < data[childIndexRight]\r\n          ? animation.push(['compare', anchor, childIndexRight])\r\n          : animation.push(['compare', anchor, childIndexLeft]);\r\n      } else {\r\n        animation.push(['compare', anchor, childIndexLeft]);\r\n      }\r\n      if (\r\n        childIndexRight < data.length - i &&\r\n        data[anchor] < data[childIndexRight] &&\r\n        data[childIndexLeft] < data[childIndexRight]\r\n      ) {\r\n        switchData(data, anchor, childIndexRight);\r\n        animation.push([\r\n          'switch',\r\n          isFinal,\r\n          anchor,\r\n          childIndexRight,\r\n          data[anchor],\r\n          data[childIndexRight],\r\n        ]);\r\n        anchor = childIndexRight;\r\n      } else if (data[anchor] < data[childIndexLeft]) {\r\n        switchData(data, anchor, childIndexLeft);\r\n        animation.push([\r\n          'switch',\r\n          isFinal,\r\n          anchor,\r\n          childIndexLeft,\r\n          data[anchor],\r\n          data[childIndexLeft],\r\n        ]);\r\n        anchor = childIndexLeft;\r\n      } else {\r\n        childIndexRight < data.length - i &&\r\n        data[childIndexLeft] < data[childIndexRight]\r\n          ? animation.push(['recoverColor', anchor, childIndexRight])\r\n          : animation.push(['recoverColor', anchor, childIndexLeft]);\r\n        break;\r\n      }\r\n      childIndexLeft = anchor * 2 + 1;\r\n      childIndexRight = anchor * 2 + 2;\r\n    }\r\n  }\r\n  animation.push(['finish', 0]);\r\n}\r\n\r\nfunction heapSort(input) {\r\n  let data = input;\r\n  const animation = [];\r\n  const length = data.length;\r\n  const lastParentIndex = 2 ** Math.trunc(Math.log2(length)) - 2;\r\n  heapify(data, lastParentIndex, animation);\r\n  takeAway(data, animation);\r\n  return [data, animation];\r\n}\r\n\r\nexport default heapSort;\r\n","import { switchData } from './swapFunction';\r\n\r\nfunction bubbleSort(data) {\r\n  const animation = [];\r\n  let result = data;\r\n  let isSwitch = false;\r\n  let isFinal = false;\r\n  for (let i = 0; i < result.length - 1; i++) {\r\n    isSwitch = false;\r\n    isFinal = false;\r\n    for (let j = 0; j < result.length - i - 1; j++) {\r\n      animation.push(['compare', j, j + 1]);\r\n      isFinal = j === result.length - i - 2 ? true : false;\r\n      if (result[j] > result[j + 1]) {\r\n        switchData(result, j, j + 1);\r\n        animation.push(['switch', isFinal, j, j + 1, result[j], result[j + 1]]);\r\n        isSwitch = true;\r\n      } else {\r\n        animation.push(['recoverColor', j, j + 1]);\r\n        if (isSwitch && isFinal)\r\n          animation.push(['finish', result.length - 1 - i]);\r\n      }\r\n    }\r\n    if (!isSwitch) {\r\n      const finish = ['finish'];\r\n      for (let k = 0; k < result.length - i; k++) {\r\n        finish.push(k);\r\n      }\r\n      animation.push(finish);\r\n      break;\r\n    } else if (isSwitch && i === result.length - 2) {\r\n      animation.push(['finish', 0]);\r\n    }\r\n  }\r\n  return [result, animation];\r\n}\r\n\r\nexport default bubbleSort;\r\n","import mergeSort from './mergeSort';\r\nimport quickSort from './quickSort';\r\nimport heapSort from './heapSort';\r\nimport bubbleSort from './bubbleSort';\r\n\r\nfunction sortByMethod(input, method) {\r\n  const data = [];\r\n  input.forEach(obj => {\r\n    data.push(obj.height);\r\n  });\r\n  let result = [];\r\n  let animation = [];\r\n  switch (method) {\r\n    case 'merge':\r\n      [result, animation] = mergeSort(data);\r\n      break;\r\n    case 'quick':\r\n      [result, animation] = quickSort(data);\r\n      break;\r\n    case 'bubble':\r\n      [result, animation] = bubbleSort(data);\r\n      break;\r\n    case 'heap':\r\n      [result, animation] = heapSort(data);\r\n      break;\r\n    default:\r\n  }\r\n  return [result, animation];\r\n}\r\n\r\nexport default sortByMethod;\r\n","import { animationAction } from '../store/animation-slice';\r\nimport { sortingBoxAction } from './sortingBox-slice';\r\nimport sortByMethod from '../algorithms/sortByMethod';\r\nconst translateAnimation = inputAnimation => {\r\n  let translatedAnimation = [];\r\n\r\n  inputAnimation.forEach(item => {\r\n    const [tag, ...data] = item;\r\n    let isFinal = false;\r\n    if (tag === 'region') {\r\n      // create 2 frame\r\n      //paint left region yellow\r\n      let index = [];\r\n      let value = [];\r\n      for (let i = data[0]; i <= data[1]; i++) {\r\n        index.push(i);\r\n        value.push({ height: null, color: 'yellow' });\r\n      }\r\n      // translatedAnimation.push({ index, value });\r\n      // //paint right region orange\r\n      for (let i = data[1] + 1; i <= data[2]; i++) {\r\n        index.push(i);\r\n        value.push({ height: null, color: 'orange' });\r\n      }\r\n      translatedAnimation.push({ index, value });\r\n    }\r\n    if (tag === 'compare') {\r\n      // create 1 frame\r\n      //paint two bar to red\r\n      let index = [data[0], data[1]];\r\n      let value = [\r\n        { height: null, color: 'red' },\r\n        { height: null, color: 'red' },\r\n      ];\r\n      translatedAnimation.push({ index, value });\r\n    }\r\n    if (tag === 'chosen') {\r\n      // create 2 frame\r\n      //paint left region yellow\r\n      let index = [];\r\n      let value = [];\r\n      let chosenColor = data[0] === 'anchor' ? 'yellow' : 'green';\r\n      index.push(data[1]);\r\n      value.push({ height: null, color: chosenColor });\r\n      translatedAnimation.push({ index, value });\r\n    }\r\n    if (tag === 'replace') {\r\n      // create 1 frame for each for loop\r\n      isFinal = data.shift();\r\n\r\n      for (let [i, j] = [data[0], 2]; j < data.length; [i++, j++]) {\r\n        let color = isFinal ? '#00BBFF' : 'blue';\r\n        translatedAnimation.push({\r\n          index: [i],\r\n          value: [{ height: data[j], color }],\r\n        });\r\n      }\r\n    }\r\n    if (tag === 'switch') {\r\n      /* the switch case is use in qicuksort, bubble sort, and heap sort. There is an isFinal mark to check and will paint the data which was not need to change again to light blue. If the data is still needed to be sort, it will be paint in blue.\r\n       */\r\n      isFinal = data.shift();\r\n      let color = isFinal ? '#00BBFF' : 'blue';\r\n      // first mark two switch pair in green\r\n      translatedAnimation.push({\r\n        index: [data[0], data[1]],\r\n        value: [\r\n          { height: null, color: 'green' },\r\n          { height: null, color: 'green' },\r\n        ],\r\n      });\r\n      // switch their height\r\n      translatedAnimation.push({\r\n        index: [data[0], data[1]],\r\n        value: [\r\n          { height: data[2], color: 'green' },\r\n          { height: data[3], color: 'green' },\r\n        ],\r\n      });\r\n      // after switching, set their color back to blue or final color.\r\n      translatedAnimation.push({\r\n        index: [data[0], data[1]],\r\n        value: [\r\n          { height: null, color: 'blue' },\r\n          { height: null, color: color },\r\n        ],\r\n      });\r\n    }\r\n    if (tag === 'recoverColor') {\r\n      let recoverIndex = data.length <= 1 ? [data] : [...data];\r\n      let index = [];\r\n      let value = [];\r\n      for (let i = 0; i < recoverIndex.length; i++) {\r\n        index.push(recoverIndex[i]);\r\n        value.push({ height: null, color: 'blue' });\r\n      }\r\n      translatedAnimation.push({ index, value });\r\n    }\r\n    if (tag === 'finish') {\r\n      let finishIndex = data.length <= 1 ? [data] : [...data];\r\n      let index = [];\r\n      let value = [];\r\n      for (let i = 0; i < finishIndex.length; i++) {\r\n        index.push(finishIndex[i]);\r\n        value.push({ height: null, color: '#00BBFF' });\r\n      }\r\n      translatedAnimation.push({ index, value });\r\n    }\r\n  });\r\n  return translatedAnimation;\r\n};\r\nexport const sortingArray = (array, method) => {\r\n  return dispatch => {\r\n    const [result, animation] = sortByMethod(array, method);\r\n\r\n    let translatedAnimation = translateAnimation(animation);\r\n\r\n    dispatch(animationAction.storeAnimation(translatedAnimation));\r\n    dispatch(\r\n      sortingBoxAction.storeSortingResult({\r\n        sortedResult: result,\r\n        sortedAnimation: translatedAnimation,\r\n      })\r\n    );\r\n  };\r\n};\r\n","import classes from './MethodButton.module.css';\r\nconst MethodButton = props => {\r\n  return (\r\n    <button\r\n      className={`${classes.btn} ${props.isRunning && classes.disable}`}\r\n      disabled={props.isRunning}\r\n      onClick={() => {\r\n        props.buttonFnc(props.method);\r\n      }}\r\n    >{`${props.method}`}</button>\r\n  );\r\n};\r\nexport default MethodButton;\r\n","import classes from './InputBar.module.css';\r\nimport { useState } from 'react';\r\nconst InputBar = props => {\r\n  const [value, setValue] = useState(0);\r\n  const changeValueHandler = event => {\r\n    setValue(Number(event.target.value));\r\n    props.InputFnc();\r\n  };\r\n  return (\r\n    <div className={classes.adjust}>\r\n      <label htmlFor=\"input\">{props.name}:</label>\r\n      <input\r\n        type=\"range\"\r\n        className=\"input\"\r\n        defaultValue=\"0\"\r\n        max={99}\r\n        step={1}\r\n        ref={props.setRef}\r\n        onChange={changeValueHandler}\r\n      ></input>\r\n      <label htmlFor=\"input\">\r\n        {props.changeStep * value + props.initialValue} {props.unit}\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\nexport default InputBar;\r\n","import classes from './SortingButton.module.css';\r\nconst SortingButton = props => {\r\n  return (\r\n    <button className={classes.btn} onClick={props.buttonFnc}>\r\n      {props.message}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SortingButton;\r\n","import { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { arrayAction } from '../../store/array-slice';\r\nimport { sortingBoxAction } from '../../store/sortingBox-slice';\r\nimport { animationAction } from '../../store/animation-slice';\r\nimport { displayAnimation } from '../../store/animation-action';\r\nimport { sortingArray } from '../../store/sortingBox-action';\r\n//////////////////////////////\r\nimport classes from './ToolBar.module.css';\r\nimport MethodButton from './MethodButton';\r\nimport InputBar from './InputBar';\r\nimport SortingButton from './SortingButton';\r\n///////////////////////////////////\r\nfunction ToolBar() {\r\n  // use useState function to get state in function component\r\n  const [size, setSize] = useState(4);\r\n  const [speed, setSpeed] = useState(10);\r\n  const [sortedData, setSortedData] = useState({});\r\n  const [isRunning, setisRunning] = useState(false);\r\n  const [isReadyToSort, setIsReadyToSort] = useState(false);\r\n\r\n  //\r\n  const sizeRef = useRef();\r\n  const speedRef = useRef();\r\n  // use dispacth method to call function from slice(store in the index)\r\n  const dispatch = useDispatch();\r\n\r\n  // use useSelector to call the state from the slice\r\n  const { sortedResult, sortedAnimation } = useSelector(\r\n    state => state.sortingBox\r\n  );\r\n  const array = useSelector(state => state.array.value);\r\n  const isAnimationRunning = useSelector(state => state.animation.isRunning);\r\n  //\r\n  useEffect(() => {\r\n    setisRunning(isAnimationRunning);\r\n  }, [isAnimationRunning]);\r\n  // To highlight the chosen btn color and reset other buttons to no color\r\n  useEffect(() => {\r\n    dispatch(arrayAction.resetArray(size));\r\n  }, [dispatch, size]);\r\n  ////\r\n  useEffect(() => {\r\n    setSortedData({ sortedResult, sortedAnimation });\r\n  }, [sortedResult, sortedAnimation]);\r\n  /////\r\n  const resetArrayHandler = () => {\r\n    // console.log(size);\r\n    dispatch(arrayAction.resetArray(size));\r\n  };\r\n  const changeSizeHandler = () => {\r\n    const realSize = Number(sizeRef.current.value) + 4;\r\n    // console.log(realSize);\r\n    setSize(realSize);\r\n  };\r\n  const changeSpeedHandler = () => {\r\n    const realSpeed = Number(speedRef.current.value) * 10 + 10;\r\n    // console.log(realSpeed);\r\n    setSpeed(realSpeed);\r\n    dispatch(animationAction.changeSpeed(realSpeed));\r\n  };\r\n  const changeSortingMethodHandler = newMethod => {\r\n    setIsReadyToSort(true);\r\n    dispatch(sortingBoxAction.changeMethod(newMethod));\r\n    dispatch(sortingArray(array, newMethod));\r\n    // setisRunning(true);\r\n  };\r\n  const sortingArrayHandler = () => {\r\n    setIsReadyToSort(false);\r\n    dispatch(displayAnimation(sortedData.sortedAnimation, speed));\r\n  };\r\n  return (\r\n    <div className={classes['toolbar']}>\r\n      <div className={classes['container']}>\r\n        <div className={classes['reset']}>\r\n          <button\r\n            className={`${classes['btn']} ${isRunning && classes.disable}`}\r\n            onClick={resetArrayHandler}\r\n            disabled={isRunning}\r\n          >\r\n            Reset Array!\r\n          </button>\r\n        </div>\r\n        <div className={classes['adjust']}>\r\n          <InputBar\r\n            name=\"Size\"\r\n            unit=\"bars\"\r\n            setRef={sizeRef}\r\n            initialValue={4}\r\n            changeStep={1}\r\n            InputFnc={changeSizeHandler}\r\n          />\r\n          <InputBar\r\n            name=\"Speed\"\r\n            unit=\"ms\"\r\n            setRef={speedRef}\r\n            initialValue={10}\r\n            changeStep={10}\r\n            InputFnc={changeSpeedHandler}\r\n          />\r\n        </div>\r\n        <div className={classes['method']}>\r\n          <MethodButton\r\n            method=\"merge\"\r\n            buttonFnc={changeSortingMethodHandler}\r\n            isRunning={isRunning}\r\n          />\r\n          <MethodButton\r\n            method=\"quick\"\r\n            buttonFnc={changeSortingMethodHandler}\r\n            isRunning={isRunning}\r\n          />\r\n          <MethodButton\r\n            method=\"heap\"\r\n            buttonFnc={changeSortingMethodHandler}\r\n            isRunning={isRunning}\r\n          />\r\n          <MethodButton\r\n            method=\"bubble\"\r\n            buttonFnc={changeSortingMethodHandler}\r\n            isRunning={isRunning}\r\n          />\r\n        </div>\r\n\r\n        <div className={classes['sort']}>\r\n          {isReadyToSort && (\r\n            <SortingButton buttonFnc={sortingArrayHandler} message={'sort!'} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToolBar;\r\n","import { arrayAction } from './array-slice';\r\nimport { animationAction } from './animation-slice';\r\nexport const displayAnimation = (animation, speed) => {\r\n  return dispatch => {\r\n    let timmer = 0;\r\n\r\n    dispatch(animationAction.changingRunningState(true));\r\n    animation.forEach(item => {\r\n      timmer += speed;\r\n      setTimeout(() => {\r\n        dispatch(arrayAction.changeArrayByIndex(item));\r\n      }, timmer);\r\n    });\r\n    setTimeout(() => {\r\n      dispatch(animationAction.changingRunningState(false));\r\n    }, timmer);\r\n  };\r\n};\r\n","import Visualizer from './components/visualizer/Visualizer';\nimport ToolBar from './components/toolbar/ToolBar';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToolBar />\n      <Visualizer />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport animationSlice from './animation-slice';\r\nimport arraySlice from './array-slice';\r\nimport sortingBoxSlice from './sortingBox-slice';\r\nconst store = configureStore({\r\n  reducer: {\r\n    animation: animationSlice.reducer,\r\n    array: arraySlice.reducer,\r\n    sortingBox: sortingBoxSlice.reducer,\r\n  },\r\n});\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\n//\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolbar\":\"ToolBar_toolbar__2XAxX\",\"container\":\"ToolBar_container__3b0ln\",\"box\":\"ToolBar_box__28sJ9\",\"btn\":\"ToolBar_btn__2PZZm\",\"disable\":\"ToolBar_disable__1zbXf\",\"reset\":\"ToolBar_reset__22qRG\",\"adjust\":\"ToolBar_adjust__11bX1\",\"method\":\"ToolBar_method__2ehiX\",\"sort\":\"ToolBar_sort__2wa43\"};"],"sourceRoot":""}
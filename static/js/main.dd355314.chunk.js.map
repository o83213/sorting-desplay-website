{"version":3,"sources":["components/Visualizer.js","Algorithms/createRandomArray.js","Algorithms/recoverArray.js","features/array.js","Algorithms/mergeSort.js","Algorithms/swapFunction.js","Algorithms/quickSort.js","Algorithms/heapSort.js","Algorithms/bubbleSort.js","Algorithms/sortByMethod.js","features/sortingBox.js","Algorithms/changeBarHeight.js","features/animation.js","components/ToolBar.js","App.js","index.js"],"names":["Visualizer","array","useSelector","state","value","id","map","index","className","style","height","backgroundColor","randomIntFromInterval","min","max","Math","trunc","random","createRandomArray","arraySize","newArray","i","push","arrayBars","document","getElementsByClassName","recoverArray","initialArray","length","arraySlice","createSlice","name","initialState","reducers","resetArray","action","payload","setInitialArray","actions","mergeSort","data","animation","result","splitAndMerge","helperData","startIndex","endIndex","middleIndex","replaceData","j","k","replaceAnimation","mergeTwoList","slice","switchData","idx1","idx2","temp","partition","start","end","pivot","isFinal","doQuickSort","anchor","quickSort","heapSort","input","lastParent","childIndexLeft","childIndexRight","heapify","log2","takeAway","bubbleSort","isSwitch","finish","sortByMethod","method","initialStateValue","sortedResult","sortedAnimation","sortingBoxSlice","sorting","changeMethod","resetBox","closeBtn","getElementsByTagName","closeInput","changeBarHeight","inputAnimation","timeDelay","timer","element","pointerEvents","chosenMark","setTimeout","shift","chosenColor","color","recoverIndex","finishIndex","endTime","getElementById","innerText","animationSlice","speed","changeSpeed","playAnimation","ToolBar","useState","size","setSize","setSpeed","isRunning","setisRunning","dispatch","useDispatch","sortedData","sortingBox","sortingBtn","methodBtn","resetClickBtn","resetBtn","event","background","display","target","useEffect","onClick","htmlFor","type","defaultValue","onChange","Number","App","store","configureStore","reducer","arrayReducer","animationReducer","sortingBoxReducer","ReactDOM","render"],"mappings":"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","file":"static/js/main.dd355314.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './Visualizer.css';\r\nfunction Visualizer() {\r\n  const array = useSelector(state => {\r\n    return state.array.value;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"bodyContainer\">\r\n        {array.map((value, index) => {\r\n          return (\r\n            <div\r\n              className=\"bar\"\r\n              key={index}\r\n              style={{\r\n                height: `${value}px`,\r\n                backgroundColor: 'blue',\r\n              }}\r\n            ></div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div>\r\n        <h3 id=\"timer\">Not counting yet!</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Visualizer;\r\n","function randomIntFromInterval(min, max) {\r\n  return Math.trunc(Math.random() * (max - min + 1) + min);\r\n}\r\nfunction createRandomArray(arraySize = 4) {\r\n  const newArray = [];\r\n  for (let i = 0; i < arraySize; i++) {\r\n    newArray.push(randomIntFromInterval(5, 500));\r\n  }\r\n  return newArray;\r\n}\r\n\r\nexport default createRandomArray;\r\n","const arrayBars = document.getElementsByClassName('bar');\r\nfunction recoverArray(initialArray) {\r\n  for (let i = 0; i < initialArray.length; i++) {\r\n    arrayBars[i].style.height = `${initialArray[i]}px`;\r\n    arrayBars[i].style.backgroundColor = 'blue';\r\n  }\r\n}\r\nexport default recoverArray;\r\n","/*\r\nThis is the place to create the reducer\r\nBy using @reduxjs/toolkit, you can create a reducer easily!\r\nHere we create a slice that accepts an initial state,\r\nan object full of reducer functions,\r\nand a \"slice name\",\r\nand automatically generates action creators\r\nand action types that correspond to the reducers \r\nand state\r\n*/\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport createRandomArray from '../Algorithms/createRandomArray';\r\nimport recoverArray from '../Algorithms/recoverArray';\r\nconst initialStateValue = [];\r\nexport const arraySlice = createSlice({\r\n  name: 'array',\r\n  initialState: {\r\n    value: initialStateValue,\r\n  },\r\n  reducers: {\r\n    resetArray: (state, action) => {\r\n      state.value = createRandomArray(action.payload);\r\n    },\r\n    setInitialArray: state => {\r\n      recoverArray(state.value);\r\n    },\r\n  },\r\n});\r\nexport const { resetArray } = arraySlice.actions;\r\nexport const { setInitialArray } = arraySlice.actions;\r\nexport default arraySlice.reducer;\r\n","function mergeSort(data) {\r\n  const animation = [];\r\n  function mergeTwoList(\r\n    replaceData,\r\n    helperData,\r\n    startIndex,\r\n    middleIndex,\r\n    endIndex,\r\n    animation\r\n  ) {\r\n    //When merge, replace data is not important, its just a container to record replace index and value, you can even copy the replacedata in the function, but may cause some space wasted problem!\r\n    let i = startIndex;\r\n    let j = middleIndex + 1;\r\n    // k is the replace array index\r\n    let k = startIndex;\r\n    let isFinal =\r\n      endIndex - startIndex === helperData.length - 1 ? true : false;\r\n    // mark left and right\r\n    let replaceAnimation = ['replace', isFinal, startIndex, endIndex];\r\n    animation.push(['region', startIndex, middleIndex, endIndex]);\r\n    while (i <= middleIndex && j <= endIndex) {\r\n      animation.push(['compare', i, j]);\r\n      if (helperData[i] < helperData[j]) {\r\n        animation.push(['chosen', '', i]);\r\n        replaceAnimation.push(helperData[i]);\r\n        replaceData[k++] = helperData[i++];\r\n      } else {\r\n        animation.push(['chosen', '', j]);\r\n        replaceAnimation.push(helperData[j]);\r\n        // animation.push([k, helperData[j]])\r\n        replaceData[k++] = helperData[j++];\r\n      }\r\n    }\r\n    while (i <= middleIndex) {\r\n      animation.push(['chosen', '', i]);\r\n      replaceAnimation.push(helperData[i]);\r\n      replaceData[k++] = helperData[i++];\r\n    }\r\n    while (j <= endIndex) {\r\n      animation.push(['chosen', '', j]);\r\n      replaceAnimation.push(helperData[j]);\r\n      replaceData[k++] = helperData[j++];\r\n    }\r\n    animation.push(replaceAnimation);\r\n    return replaceData;\r\n  }\r\n  function splitAndMerge(data, helperData, startIndex, endIndex, animation) {\r\n    // the helperdata is used to help compare which value is bigger in the array(which is a copy of original data), and data is to store the switch result.\r\n    const middleIndex = Math.trunc((startIndex + endIndex) / 2);\r\n    if (startIndex >= endIndex) {\r\n      return;\r\n    } else {\r\n      splitAndMerge(helperData, data, startIndex, middleIndex, animation);\r\n      splitAndMerge(helperData, data, middleIndex + 1, endIndex, animation);\r\n      return mergeTwoList(\r\n        data,\r\n        helperData,\r\n        startIndex,\r\n        middleIndex,\r\n        endIndex,\r\n        animation\r\n      );\r\n    }\r\n  }\r\n  const result = splitAndMerge(\r\n    data,\r\n    data.slice(),\r\n    0,\r\n    data.length - 1,\r\n    animation\r\n  );\r\n  return [result, animation];\r\n}\r\nexport default mergeSort;\r\n","function switchData(array, idx1, idx2) {\r\n  const temp = array[idx1]\r\n  array[idx1] = array[idx2]\r\n  array[idx2] = temp\r\n}\r\n\r\nexport { switchData }\r\n","import { switchData } from './swapFunction';\r\n\r\nfunction partition(data, start, end, animation) {\r\n  let pivot = start;\r\n  let isFinal = false;\r\n  animation.push(['chosen', 'anchor', pivot]);\r\n  while (end > start) {\r\n    // find start index\r\n    // first input [pivot, start] animation, because they will compare first!\r\n    // animation.push(['chosen', 'start', start]);\r\n    while (end > start && data[start] <= data[pivot]) {\r\n      // animation.push([pivot, start]);\r\n      if (start !== pivot) {\r\n        animation.push(['recoverColor', start]);\r\n      }\r\n      start++;\r\n      animation.push(['compare', start, end]);\r\n    }\r\n    while (data[end] > data[pivot]) {\r\n      animation.push(['recoverColor', end]);\r\n      end--;\r\n      animation.push(['compare', start, end]);\r\n    }\r\n\r\n    if (end > start) {\r\n      switchData(data, start, end);\r\n      animation.push(['switch', isFinal, start, end, data[start], data[end]]);\r\n    } else if (pivot !== end) {\r\n      switchData(data, pivot, end);\r\n      isFinal = true;\r\n      animation.push(['recoverColor', start, end]);\r\n      animation.push(['switch', isFinal, pivot, end, data[pivot], data[end]]);\r\n    }\r\n  }\r\n  if (end === pivot) {\r\n    animation.push(['recoverColor', start, end]);\r\n    animation.push(['finish', end]);\r\n  }\r\n  return end;\r\n}\r\n\r\nfunction doQuickSort(data, start = 0, end = data.length - 1, animation) {\r\n  if (start < end) {\r\n    const anchor = partition(data, start, end, animation);\r\n    doQuickSort(data, start, anchor - 1, animation);\r\n    doQuickSort(data, anchor + 1, end, animation);\r\n  } else if (start === end) {\r\n    animation.push(['finish', start]);\r\n  }\r\n}\r\n\r\nfunction quickSort(data) {\r\n  let result = data;\r\n  const animation = [];\r\n  doQuickSort(result, 0, result.length - 1, animation);\r\n  return [result, animation];\r\n}\r\n\r\nexport default quickSort;\r\n","import { switchData } from './swapFunction';\r\nlet isFinal = false;\r\nfunction heapify(data, lastParent, animation) {\r\n  for (let i = lastParent; i >= 0; i--) {\r\n    let childIndexLeft = i * 2 + 1;\r\n    let childIndexRight = i * 2 + 2;\r\n    let anchor = i;\r\n    while (childIndexLeft < data.length) {\r\n      // while there is a left child exist, need to doing comparing, so\r\n      // here is to create comparing animation\r\n      if (childIndexRight < data.length) {\r\n        animation.push(['compare', childIndexLeft, childIndexRight]);\r\n        animation.push(['recoverColor', childIndexLeft, childIndexRight]);\r\n        data[childIndexLeft] < data[childIndexRight]\r\n          ? animation.push(['compare', anchor, childIndexRight])\r\n          : animation.push(['compare', anchor, childIndexLeft]);\r\n      } else {\r\n        animation.push(['compare', anchor, childIndexLeft]);\r\n      }\r\n\r\n      // here is to do switch check\r\n      if (\r\n        childIndexRight < data.length &&\r\n        data[anchor] < data[childIndexRight] &&\r\n        data[childIndexLeft] < data[childIndexRight]\r\n      ) {\r\n        switchData(data, anchor, childIndexRight);\r\n        // record animation\r\n        animation.push([\r\n          'switch',\r\n          isFinal,\r\n          anchor,\r\n          childIndexRight,\r\n          data[anchor],\r\n          data[childIndexRight],\r\n        ]);\r\n        anchor = childIndexRight;\r\n      } else if (data[anchor] < data[childIndexLeft]) {\r\n        switchData(data, anchor, childIndexLeft);\r\n        animation.push([\r\n          'switch',\r\n          isFinal,\r\n          anchor,\r\n          childIndexLeft,\r\n          data[anchor],\r\n          data[childIndexLeft],\r\n        ]);\r\n        anchor = childIndexLeft;\r\n      } else {\r\n        childIndexRight < data.length - i &&\r\n        data[childIndexLeft] < data[childIndexRight]\r\n          ? animation.push(['recoverColor', anchor, childIndexRight])\r\n          : animation.push(['recoverColor', anchor, childIndexLeft]);\r\n        break;\r\n      }\r\n\r\n      childIndexLeft = anchor * 2 + 1;\r\n      childIndexRight = anchor * 2 + 2;\r\n    }\r\n  }\r\n}\r\n\r\nfunction takeAway(data, animation) {\r\n  for (let i = 1; i < data.length; i++) {\r\n    // take away yop element and put it at the end\r\n    let anchor = 0;\r\n    switchData(data, 0, data.length - i);\r\n    isFinal = true;\r\n    animation.push([\r\n      'switch',\r\n      isFinal,\r\n      0,\r\n      data.length - i,\r\n      data[0],\r\n      data[data.length - i],\r\n    ]);\r\n    isFinal = false;\r\n    // rebuild the heap\r\n    let childIndexLeft = anchor * 2 + 1;\r\n    let childIndexRight = anchor * 2 + 2;\r\n    while (childIndexLeft < data.length - i) {\r\n      // while there is a left child exist, need to doing comparing, so\r\n      // here is to create comparing animation\r\n      if (childIndexRight < data.length - i) {\r\n        animation.push(['compare', childIndexLeft, childIndexRight]);\r\n        animation.push(['recoverColor', childIndexLeft, childIndexRight]);\r\n        data[childIndexLeft] < data[childIndexRight]\r\n          ? animation.push(['compare', anchor, childIndexRight])\r\n          : animation.push(['compare', anchor, childIndexLeft]);\r\n      } else {\r\n        animation.push(['compare', anchor, childIndexLeft]);\r\n      }\r\n      if (\r\n        childIndexRight < data.length - i &&\r\n        data[anchor] < data[childIndexRight] &&\r\n        data[childIndexLeft] < data[childIndexRight]\r\n      ) {\r\n        switchData(data, anchor, childIndexRight);\r\n        animation.push([\r\n          'switch',\r\n          isFinal,\r\n          anchor,\r\n          childIndexRight,\r\n          data[anchor],\r\n          data[childIndexRight],\r\n        ]);\r\n        anchor = childIndexRight;\r\n      } else if (data[anchor] < data[childIndexLeft]) {\r\n        switchData(data, anchor, childIndexLeft);\r\n        animation.push([\r\n          'switch',\r\n          isFinal,\r\n          anchor,\r\n          childIndexLeft,\r\n          data[anchor],\r\n          data[childIndexLeft],\r\n        ]);\r\n        anchor = childIndexLeft;\r\n      } else {\r\n        childIndexRight < data.length - i &&\r\n        data[childIndexLeft] < data[childIndexRight]\r\n          ? animation.push(['recoverColor', anchor, childIndexRight])\r\n          : animation.push(['recoverColor', anchor, childIndexLeft]);\r\n        break;\r\n      }\r\n      childIndexLeft = anchor * 2 + 1;\r\n      childIndexRight = anchor * 2 + 2;\r\n    }\r\n  }\r\n  animation.push(['finish', 0]);\r\n}\r\n\r\nfunction heapSort(input) {\r\n  let data = input;\r\n  const animation = [];\r\n  const length = data.length;\r\n  const lastParentIndex = 2 ** Math.trunc(Math.log2(length)) - 2;\r\n  heapify(data, lastParentIndex, animation);\r\n  takeAway(data, animation);\r\n  return [data, animation];\r\n}\r\n\r\nexport default heapSort;\r\n","import { switchData } from './swapFunction';\r\n\r\nfunction bubbleSort(data) {\r\n  const animation = [];\r\n  let result = data;\r\n  let isSwitch = false;\r\n  let isFinal = false;\r\n  for (let i = 0; i < result.length - 1; i++) {\r\n    isSwitch = false;\r\n    isFinal = false;\r\n    for (let j = 0; j < result.length - i - 1; j++) {\r\n      animation.push(['compare', j, j + 1]);\r\n      isFinal = j === result.length - i - 2 ? true : false;\r\n      if (result[j] > result[j + 1]) {\r\n        switchData(result, j, j + 1);\r\n        animation.push(['switch', isFinal, j, j + 1, result[j], result[j + 1]]);\r\n        isSwitch = true;\r\n      } else {\r\n        animation.push(['recoverColor', j, j + 1]);\r\n        if (isSwitch && isFinal)\r\n          animation.push(['finish', result.length - 1 - i]);\r\n      }\r\n    }\r\n    if (!isSwitch) {\r\n      const finish = ['finish'];\r\n      for (let k = 0; k < result.length - i; k++) {\r\n        finish.push(k);\r\n      }\r\n      animation.push(finish);\r\n      break;\r\n    } else if (isSwitch && i === result.length - 2) {\r\n      animation.push(['finish', 0]);\r\n    }\r\n  }\r\n  return [result, animation];\r\n}\r\n\r\nexport default bubbleSort;\r\n","import mergeSort from '../Algorithms/mergeSort';\r\nimport quickSort from '../Algorithms/quickSort';\r\nimport heapSort from '../Algorithms/heapSort';\r\nimport bubbleSort from '../Algorithms/bubbleSort';\r\n\r\nfunction sortByMethod(method, input) {\r\n  const data = input.slice();\r\n  let result = [];\r\n  let animation = [];\r\n  switch (method) {\r\n    case 'merge':\r\n      [result, animation] = mergeSort(data);\r\n      break;\r\n    case 'quick':\r\n      [result, animation] = quickSort(data);\r\n      break;\r\n    case 'bubble':\r\n      [result, animation] = bubbleSort(data);\r\n      break;\r\n    case 'heap':\r\n      [result, animation] = heapSort(data);\r\n      break;\r\n    default:\r\n  }\r\n  return [result, animation];\r\n}\r\n\r\nexport default sortByMethod;\r\n","/*\r\nThis is the place to create the reducer\r\nBy using @reduxjs/toolkit, you can create a reducer easily!\r\nHere we create a slice that accepts an initial state,\r\nan object full of reducer functions,\r\nand a \"slice name\",\r\nand automatically generates action creators\r\nand action types that correspond to the reducers \r\nand state\r\n*/\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport sortByMethod from '../Algorithms/sortByMethod';\r\n\r\nconst initialStateValue = { sortedResult: [], sortedAnimation: [], method: '' };\r\nexport const sortingBoxSlice = createSlice({\r\n  name: 'sortingBox',\r\n  initialState: {\r\n    value: initialStateValue,\r\n  },\r\n  reducers: {\r\n    sorting: (state, action) => {\r\n      let [result, animation] = sortByMethod(\r\n        state.value.method,\r\n        action.payload\r\n      );\r\n      state.value = {\r\n        sortedResult: result,\r\n        sortedAnimation: animation,\r\n        method: state.value.method,\r\n      };\r\n    },\r\n    changeMethod: (state, action) => {\r\n      state.value.method = action.payload;\r\n    },\r\n    resetBox: state => {\r\n      state.value = initialStateValue;\r\n    },\r\n  },\r\n});\r\nexport default sortingBoxSlice.reducer;\r\nexport const { sorting, changeMethod, resetBox } = sortingBoxSlice.actions;\r\n","const arrayBars = document.getElementsByClassName('bar');\r\nconst closeBtn = document.getElementsByTagName('button');\r\nconst closeInput = document.getElementsByTagName('input');\r\n\r\nfunction changeBarHeight(inputAnimation, timeDelay = 100) {\r\n  let timer = 0;\r\n  const animation = [...inputAnimation, ['animationEnd']];\r\n  // close btn when animation is running\r\n  for (const element of closeBtn) {\r\n    element.style.pointerEvents = 'none';\r\n  }\r\n  for (const element of closeInput) {\r\n    element.style.pointerEvents = 'none';\r\n  }\r\n\r\n  for (let i = 0; i < animation.length; i++) {\r\n    let [action, ...data] = animation[i];\r\n    let isFinal = false;\r\n    let chosenMark = '';\r\n    switch (action) {\r\n      case 'region':\r\n        //paint left region yellow\r\n        setTimeout(() => {\r\n          for (let i = data[0]; i <= data[1]; i++) {\r\n            arrayBars[i].style.backgroundColor = 'yellow';\r\n          }\r\n        }, timer);\r\n        //paint right region orange\r\n        setTimeout(() => {\r\n          for (let i = data[1] + 1; i <= data[2]; i++) {\r\n            arrayBars[i].style.backgroundColor = 'orange';\r\n          }\r\n        }, timer + timeDelay);\r\n        timer += 2 * timeDelay;\r\n        break;\r\n      case 'compare':\r\n        setTimeout(() => {\r\n          arrayBars[data[0]].style.backgroundColor = 'red';\r\n          arrayBars[data[1]].style.backgroundColor = 'red';\r\n        }, timer);\r\n        timer += timeDelay;\r\n        break;\r\n\r\n      case 'chosen':\r\n        /* chosne case is use in merge sort and quick sort, in merge sort, the bar after compare will be chosen and painted green, in quick sort, the anchor bar will be chosen and painted yellow.\r\n         */\r\n        //identify mark\r\n        chosenMark = data.shift();\r\n        let chosenColor = 'green';\r\n        // step 1, change color for comparing bar\r\n        setTimeout(() => {\r\n          switch (chosenMark) {\r\n            case 'anchor':\r\n              chosenColor = 'Yellow';\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          arrayBars[data].style.backgroundColor = chosenColor;\r\n        }, timer);\r\n        timer += timeDelay;\r\n        break;\r\n      case 'replace':\r\n        /* the replace case is use only in merge sort because the real algorithm in merge sort is spliting the data in smaller piece and merging them into a new array. In order to show this situation in only single array, we overwrite the data in the insertion index.\r\n         */\r\n        /* isfinal is to judge if the process is at the final step, if it is, it will be paint into ilght blue!\r\n         */\r\n\r\n        isFinal = data.shift();\r\n\r\n        for (let [index, j] = [data[0], 2]; j < data.length; [index++, j++]) {\r\n          // change height\r\n          setTimeout(() => {\r\n            arrayBars[index].style.height = `${data[j]}px`;\r\n          }, timer);\r\n          // finished change\r\n          let color = isFinal ? '#00BBFF' : 'blue';\r\n          setTimeout(() => {\r\n            arrayBars[index].style.backgroundColor = color;\r\n          }, timer + timeDelay);\r\n\r\n          timer += 2 * timeDelay;\r\n        }\r\n        break;\r\n      case 'switch':\r\n        /* the switch case is use in qicuksort, bubble sort, and heap sort. There is an isFinal mark to check and will paint the data which was not need to change again to light blue. If the data is still needed to be sort, it will be paint in blue.\r\n         */\r\n        isFinal = data.shift();\r\n        let color = isFinal ? '#00BBFF' : 'blue';\r\n        // first mark two switch pair in green\r\n        setTimeout(() => {\r\n          arrayBars[data[0]].style.backgroundColor = 'green';\r\n          arrayBars[data[1]].style.backgroundColor = 'green';\r\n        }, timer);\r\n        // switch their height\r\n        setTimeout(() => {\r\n          arrayBars[data[0]].style.height = `${data[2]}px`;\r\n          arrayBars[data[1]].style.height = `${data[3]}px`;\r\n        }, timer + timeDelay);\r\n        // after switching, set their color back to blue or final color.\r\n        setTimeout(() => {\r\n          arrayBars[data[0]].style.backgroundColor = 'blue';\r\n          arrayBars[data[1]].style.backgroundColor = color;\r\n        }, timer + 2 * timeDelay);\r\n        timer += 3 * timeDelay;\r\n        break;\r\n      case 'recoverColor':\r\n        /*\r\n        recover color is used in in qicuksort, bubble sort, and heap sort. This step is used for recover their color after comparing step or switch step.\r\n         */\r\n        let recoverIndex = data.length <= 1 ? [data] : [...data];\r\n        setTimeout(() => {\r\n          for (let i = 0; i < recoverIndex.length; i++) {\r\n            arrayBars[recoverIndex[i]].style.backgroundColor = 'blue';\r\n          }\r\n        }, timer);\r\n        timer += timeDelay;\r\n        break;\r\n      case 'finish':\r\n        /*\r\n        finish is used in in qicuksort, bubble sort, and heap sort. This step is used for marking the finish comparing data.\r\n         */\r\n        let finishIndex = data.length <= 1 ? [data] : [...data];\r\n        setTimeout(() => {\r\n          for (let i = 0; i < finishIndex.length; i++) {\r\n            arrayBars[finishIndex[i]].style.backgroundColor = '#00BBFF';\r\n          }\r\n        }, timer);\r\n        timer += timeDelay;\r\n        break;\r\n      case 'animationEnd':\r\n        /*\r\n        this step will be automatically add in the end of the animation to print out the time and change the btn to clickable again\r\n        */\r\n        let endTime = timer / 1000;\r\n        setTimeout(() => {\r\n          document.getElementById(\r\n            'timer'\r\n          ).innerText = `Spend time: ${endTime} sec`;\r\n          for (const element of closeBtn) {\r\n            element.style.pointerEvents = 'auto';\r\n          }\r\n          for (const element of closeInput) {\r\n            element.style.pointerEvents = 'auto';\r\n          }\r\n        }, timer);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}\r\nexport default changeBarHeight;\r\n","/*\r\nThis is the place to create the reducer\r\nBy using @reduxjs/toolkit, you can create a reducer easily!\r\nHere we create a slice that accepts an initial state,\r\nan object full of reducer functions,\r\nand a \"slice name\",\r\nand automatically generates action creators\r\nand action types that correspond to the reducers \r\nand state\r\n*/\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport changeBarHeight from '../Algorithms/changeBarHeight';\r\nconst initialStateValue = { speed: 10 };\r\nexport const animationSlice = createSlice({\r\n  name: 'animation',\r\n  initialState: {\r\n    value: initialStateValue,\r\n  },\r\n  reducers: {\r\n    changeSpeed: (state, action) => {\r\n      state.value.speed = action.payload;\r\n    },\r\n    playAnimation: (state, action) => {\r\n      changeBarHeight(action.payload, state.value.speed);\r\n    },\r\n  },\r\n});\r\nexport const { changeSpeed } = animationSlice.actions;\r\nexport const { playAnimation } = animationSlice.actions;\r\nexport default animationSlice.reducer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { resetArray, setInitialArray } from '../features/array';\r\nimport { sorting, changeMethod, resetBox } from '../features/sortingBox';\r\nimport { changeSpeed, playAnimation } from '../features/animation';\r\nimport './ToolBar.css';\r\n\r\nfunction ToolBar() {\r\n  // use useState function to get state in function component\r\n  const [minsize, minspeed] = [4, 10];\r\n  // the arrow function is to give this state an initial state\r\n  const [size, setSize] = useState(() => minsize);\r\n  const [speed, setSpeed] = useState(() => minspeed);\r\n  const [isRunning, setisRunning] = useState(() => false);\r\n  // use dispacth method to call function from slice(store in the index)\r\n  const dispatch = useDispatch();\r\n\r\n  // use useSelector to call the state from the slice\r\n  const sortedData = useSelector(state => {\r\n    return state.sortingBox.value;\r\n  });\r\n  const array = useSelector(state => {\r\n    return state.array.value;\r\n  });\r\n\r\n  // To highlight the chosen btn color and reset other buttons to no color\r\n  const sortingBtn = document.getElementById('sortBtn');\r\n  const methodBtn = document.getElementsByClassName('methodBtn');\r\n  const resetClickBtn = document.getElementById('resetBtn');\r\n\r\n  function resetBtn(event) {\r\n    for (const btn of methodBtn) {\r\n      btn.style.background = 'none';\r\n    }\r\n    resetClickBtn.style.background = 'none';\r\n    sortingBtn.style.display = 'block';\r\n    event.target.style.background = 'yellow';\r\n  }\r\n  /* \r\n  To deal with useState delay problem, we need to use useEffect function out of the render\r\n  and here is to reset array when draging size bar!\r\n  */\r\n  useEffect(() => {\r\n    dispatch(resetArray(size));\r\n  }, [size]);\r\n  useEffect(() => {\r\n    dispatch(changeSpeed(speed));\r\n  }, [speed]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning === true) {\r\n      dispatch(setInitialArray());\r\n      dispatch(playAnimation(sortedData.sortedAnimation));\r\n      setisRunning(false);\r\n    }\r\n  }, [isRunning]);\r\n\r\n  return (\r\n    <div className=\"toolbar\">\r\n      <div className=\"container\">\r\n        <div className=\"box reset\">\r\n          <button\r\n            className=\"btn\"\r\n            id=\"resetBtn\"\r\n            onClick={event => {\r\n              dispatch(setInitialArray());\r\n              dispatch(resetArray(size));\r\n              dispatch(resetBox());\r\n              resetBtn(event);\r\n            }}\r\n          >\r\n            Reset Array!\r\n          </button>\r\n        </div>\r\n        <div className=\"box adjust\">\r\n          <div className=\"adjust-label\">\r\n            <label htmlFor=\"size\">Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              className=\"size-input\"\r\n              defaultValue=\"0\"\r\n              max={96}\r\n              onChange={event => {\r\n                setSize(Number(event.target.value) + 4);\r\n                dispatch(setInitialArray());\r\n              }}\r\n            ></input>\r\n            <label htmlFor=\"size\" id=\"sizeValue\">\r\n              {size} bars\r\n            </label>\r\n          </div>\r\n          <div className=\"adjust-label\">\r\n            <label htmlFor=\"speed\">Speed:</label>\r\n            <input\r\n              type=\"range\"\r\n              className=\"speed-input\"\r\n              defaultValue=\"0\"\r\n              max={99}\r\n              onChange={event => {\r\n                setSpeed(Number(event.target.value) * 10 + 10);\r\n              }}\r\n            ></input>\r\n            <label htmlFor=\"speed\" id=\"speedValue\">\r\n              {speed} ms\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className=\"box method\">\r\n          <button\r\n            className=\"btn methodBtn\"\r\n            onClick={event => {\r\n              dispatch(changeMethod('merge'));\r\n              resetBtn(event);\r\n            }}\r\n          >\r\n            Merge Sort\r\n          </button>\r\n          <button\r\n            className=\"btn methodBtn\"\r\n            onClick={event => {\r\n              dispatch(changeMethod('quick'));\r\n              resetBtn(event);\r\n            }}\r\n          >\r\n            Quick Sort\r\n          </button>\r\n          <button\r\n            className=\"btn methodBtn\"\r\n            onClick={event => {\r\n              dispatch(changeMethod('heap'));\r\n              resetBtn(event);\r\n            }}\r\n          >\r\n            Heap Sort\r\n          </button>\r\n          <button\r\n            className=\"btn methodBtn\"\r\n            onClick={event => {\r\n              dispatch(changeMethod('bubble'));\r\n              resetBtn(event);\r\n            }}\r\n          >\r\n            Bubble Sort\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"box sort\">\r\n          <button\r\n            className=\"btn\"\r\n            id=\"sortBtn\"\r\n            onClick={() => {\r\n              dispatch(sorting(array));\r\n              setisRunning(true);\r\n            }}\r\n          >\r\n            Sort!\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToolBar;\r\n","import Visualizer from './components/Visualizer';\nimport ToolBar from './components/ToolBar';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToolBar />\n      <Visualizer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport arrayReducer from './features/array';\nimport animationReducer from './features/animation';\nimport sortingBoxReducer from './features/sortingBox';\n//\nconst store = configureStore({\n  reducer: {\n    array: arrayReducer,\n    animation: animationReducer,\n    sortingBox: sortingBoxReducer,\n  },\n});\n//\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}